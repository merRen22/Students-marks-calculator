runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
modelo
#matriz 1*1 (11)
MatrizSexo = matrix(c(0.524,0.476), ncol = 2,nrow = 1, dimnames = list("value","sex" = Etiquetas))
MatrizEdad = matrix(c(0.221,0.779), ncol = 2,nrow = 1, dimnames = list("value","age" = Etiquetas))
MatrizZona = matrix(c(0.181,0.819), ncol = 2,nrow = 1, dimnames = list("value","address" = Etiquetas))
MatrizTamaniofamilia = matrix(c(0.721,0.279), ncol = 2,nrow = 1, dimnames = list("value","famsize" = Etiquetas))
Matrizeducacionmadres = matrix(c(0.596,0.404), ncol = 2,nrow = 1, dimnames = list("value","Medu" = Etiquetas))
Matrizeducacionpadres = matrix(c(0.507,0.493), ncol = 2,nrow = 1, dimnames = list("value","Fedu" = Etiquetas))
MatrizRazonparaescogercolegio = matrix(c(0.567,0.433), ncol = 2,nrow = 1, dimnames = list("value","reason" = Etiquetas))
MatrizGuardinaestudiantil = matrix(c(0.924,0.076), ncol = 2,nrow = 1, dimnames = list("value","guardian" = Etiquetas))
MatrizCursosjalados = matrix(c(0.199,0.801), ncol = 2,nrow = 1, dimnames = list("value","failures" = Etiquetas))
MatrizRomance = matrix(c(0.676,0.324), ncol = 2,nrow = 1, dimnames = list("value","romantic" = Etiquetas))
MatrizTiempolibre = matrix(c(0.616,0.384), ncol = 2,nrow = 1, dimnames = list("value","freetime" = Etiquetas))
#matriz 2*2 (6)
MatriztrabajoMama = matrix(c(0.328,0.672,0.729,0.271), ncol = 2,nrow = 2, dimnames = list("Mjob"=Etiquetas,"Medu"= Etiquetas))
MatriztrabajoPapa = matrix(c(0.492,0.508,0.725,0.275), ncol = 2,nrow = 2, dimnames = list("Fjob"=Etiquetas,"Fedu"= Etiquetas))
MatrizApoyoestudiantilextra = matrix(c(0.893,0.107,0.829,0.171), ncol = 2,nrow = 2, dimnames = list("schoolsup"=Etiquetas,"famsup"= Etiquetas))
MatrizActividadextra = matrix(c(0.477,0.523,0.433,0.567), ncol = 2,nrow = 2, dimnames = list("activities"=Etiquetas,"schoolsup"= Etiquetas))
MatrizClasespagasextra = matrix(c(0.533,0.467,0.567,0.433), ncol = 2,nrow = 2, dimnames = list("paid"=Etiquetas,"schoolsup"= Etiquetas))
MatrizTiempodeviaje  = matrix(c(0.836,0.164,0.956,0.044), ncol = 2,nrow = 2, dimnames = list("traveltime"=Etiquetas,"address"= Etiquetas))
#matriz 2*2*2 (6)
valuesConsumodealcholenfindesemana = c(0.964,0.036,0.892,0.108,0.635,0.365,0.676,0.324)
dim(valuesConsumodealcholenfindesemana) = c(2,2,2)
dimnames(valuesConsumodealcholenfindesemana) = list("Walc"=Etiquetas, "sex"=Etiquetas, "age"=Etiquetas)
valuesConsumodealcholensemana = c(0.988,0.012,0.905,0.095,0.983,0.017,0.927,0.073)
dim(valuesConsumodealcholensemana) = c(2,2,2)
dimnames(valuesConsumodealcholensemana) = list("Dalc"=Etiquetas, "sex"=Etiquetas, "age"=Etiquetas)
valuesconvivenciaconpadres = c(0.087,0.913,0.183,0.817,0.165,0.835,0.077,0.923)
dim(valuesconvivenciaconpadres) = c(2,2,2)
dimnames(valuesconvivenciaconpadres) = list("Pstatus"=Etiquetas, "Mjob"=Etiquetas, "Fjob"=Etiquetas)
valuesAusencias = c(0.384,0.616,0.583,0.417,0.391,0.609,0.650,0.350)
dim(valuesAusencias) = c(2,2,2)
dimnames(valuesAusencias) = list("absences"=Etiquetas, "Dalc"=Etiquetas, "famsup"=Etiquetas)
valuesInternet = c(0.269,0.731,0.115,0.885,0.591,0.409,0.115,0.885)
dim(valuesInternet) = c(2,2,2)
dimnames(valuesInternet) = list("internet"=Etiquetas, "traveltime"=Etiquetas, "address"=Etiquetas)
valuesG3 = c(0.966,0.034,0.342,0.658,0.881,0.119,0.070,0.930)
dim(valuesG3) = c(2,2,2)
dimnames(valuesG3) = list("G3"=Etiquetas, "G1"=Etiquetas, "G2"=Etiquetas)
#matriz 2*2*2*2 (7)
valuesCalidadderelacionfamiliar = c(0.259,0.741,0.209,0.791,0.278,0.722,0.350,0.650,0.50,0.50,0.50,0.50,0.50,0.50,0.115,0.885)
dim(valuesCalidadderelacionfamiliar) = c(2,2,2,2)
dimnames(valuesCalidadderelacionfamiliar) = list("famrel"=Etiquetas, "Walc"=Etiquetas, "Dalc"=Etiquetas, "Pstatus"=Etiquetas)
valuesEstadodesaludactual = c(0.419,0.581,0.50,0.50,0.477,0.523,0.50,0.50,0.553,0.447,0.550,0.450,0.582,0.418,0.875,0.125)
dim(valuesEstadodesaludactual) = c(2,2,2,2)
dimnames(valuesEstadodesaludactual) = list("health"=Etiquetas, "famrel"=Etiquetas, "Dalc"=Etiquetas, "absences"=Etiquetas)
valuesG1 = c(0.10,0.90,0.071,0.929,0.5,0.5,0.125,0.875,0.621,0.379,0.359,0.641,0.569,0.431,0.50,0.50)
dim(valuesG1) = c(2,2,2,2)
dimnames(valuesG1) = list("G1"=Etiquetas, "health"=Etiquetas, "goout"=Etiquetas, "higher"=Etiquetas)
valuesSalirconamigos = c(0.744,0.256,0.805,0.195,0.583,0.417,0.812,0.188,0.537,0.463,0.458,0.542,0.439,0.561,0.464,0.536)
dim(valuesSalirconamigos) = c(2,2,2,2)
dimnames(valuesSalirconamigos) = list("goout"=Etiquetas, "absences"=Etiquetas, "activities"=Etiquetas, "freetime"=Etiquetas)
valuesApoyoeduaciondefamilia = c(0.361,0.639,0.331,0.669,0.417,0.583,0.433,0.567,0.50,0.50,0.324,0.676,0.50,0.50,0.357,0.643)
dim(valuesApoyoeduaciondefamilia) = c(2,2,2,2)
dimnames(valuesApoyoeduaciondefamilia) = list("famsup"=Etiquetas, "Pstatus"=Etiquetas, "famsize"=Etiquetas, "guardian"=Etiquetas)
valuesTiempodeestudio = c(0.50,0.50,0.50,0.50,0.50,0.50,0.50,0.50,0.50,0.50,0.50,0.50,0.50,0.50,0.50,0.50)
dim(valuesTiempodeestudio) = c(2,2,2,2)
dimnames(valuesTiempodeestudio) = list("studytime"=Etiquetas, "internet"=Etiquetas, "failures"=Etiquetas, "romantic"=Etiquetas)
valuesContinuareduacionsuperior = c(0.073,0.927,0.160,0.840,0.007,0.993,0.012,0.988,0.024,0.976,0.028,0.972,0.016,0.984,0.028,0.972)
dim(valuesContinuareduacionsuperior) = c(2,2,2,2)
dimnames(valuesContinuareduacionsuperior) = list("higher"=Etiquetas, "paid"=Etiquetas, "studytime"=Etiquetas, "reason"=Etiquetas)
#matriz 2*2*2*2*2 (1)
valuesG2 = c(0.50,0.50,0.936,0.064,0.833,0.167,0.863,0.137,0.50,0.50,0.865,0.135,0.50,0.50,0.848,0.152,0.10,0.90,0.244,0.756,0.167,0.833,0.074,0.926,0.071,0.929,0.12,0.88,0.125,0.875,0.109,0.891)
dim(valuesG2) = c(2,2,2,2,2)
dimnames(valuesG2) = list("G2"=Etiquetas, "G1"=Etiquetas, "health"=Etiquetas, "goout"=Etiquetas, "higher"=Etiquetas)
#GRAFO
matrizU1 =  matrix(0,ncol = 31, nrow = 31, dimnames = list(c("sex","age","address","famsize","Medu","Fedu","reason","guardian","failures","romantic","freetime","Pstatus","Mjob","Fjob","traveltime","studytime","schoolsup","famsup","paid","activities","higher","internet","famrel","goout","Dalc","Walc","health","absences","G1","G2","G3"),c("sex","age","address","famsize","Medu","Fedu","reason","guardian","failures","romantic","freetime","Pstatus","Mjob","Fjob","traveltime","studytime","schoolsup","famsup","paid","activities","higher","internet","famrel","goout","Dalc","Walc","health","absences","G1","G2","G3")))
matrizU1["sex","Walc"]=1
matrizU1["sex","Dalc"]=1
matrizU1["age","Walc"]=1
matrizU1["age","Dalc"]=1
matrizU1["address","traveltime"]=1
matrizU1["address","internet"]=1
matrizU1["famsize","famsup"]=1
matrizU1["Medu","Mjob"]=1
matrizU1["Fedu","Fjob"]=1
matrizU1["reason","higher"]=1
matrizU1["guardian","famsup"]=1
matrizU1["failures","studytime"]=1
matrizU1["romantic","studytime"]=1
matrizU1["freetime","goout"]=1
matrizU1["Walc","famrel"]=1
matrizU1["traveltime","internet"]=1
matrizU1["internet","studytime"]=1
matrizU1["studytime","higher"]=1
matrizU1["Mjob","Pstatus"]=1
matrizU1["Fjob","Pstatus"]=1
matrizU1["Dalc","famrel"]=1
matrizU1["Dalc","health"]=1
matrizU1["Dalc","absences"]=1
matrizU1["Pstatus","famrel"]=1
matrizU1["Pstatus","famsup"]=1
matrizU1["famsup","absences"]=1
matrizU1["famsup","schoolsup"]=1
matrizU1["famrel","health"]=1
matrizU1["absences","health"]=1
matrizU1["absences","goout"]=1
matrizU1["schoolsup","activities"]=1
matrizU1["schoolsup","paid"]=1
matrizU1["activities","goout"]=1
matrizU1["paid","higher"]=1
matrizU1["higher","G1"]=1
matrizU1["higher","G2"]=1
matrizU1["goout","G1"]=1
matrizU1["goout","G2"]=1
matrizU1["health","G1"]=1
matrizU1["health","G2"]=1
matrizU1["G1","G3"]=1
matrizU1["G2","G3"]=1
matrizU1["G1","G2"]=1
amat(Grafo) = matrizU1
Modelo = custom.fit(Grafo,dist = list(sex=MatrizSexo,age=MatrizEdad,address=MatrizZona,famsize=MatrizTamaniofamilia,Medu=Matrizeducacionmadres,Fedu=Matrizeducacionpadres,reason=MatrizRazonparaescogercolegio,guardian=MatrizGuardinaestudiantil,failures=MatrizCursosjalados,romantic=MatrizRomance,freetime=MatrizTiempolibre,Pstatus=valuesconvivenciaconpadres,Mjob=MatriztrabajoMama,Fjob=MatriztrabajoPapa,traveltime=MatrizTiempodeviaje,studytime=valuesTiempodeestudio,schoolsup=MatrizApoyoestudiantilextra,famsup=valuesApoyoeduaciondefamilia,paid=MatrizClasespagasextra,activities=MatrizActividadextra,higher=valuesContinuareduacionsuperior,internet=valuesInternet,famrel=valuesCalidadderelacionfamiliar,goout=valuesSalirconamigos,Dalc=valuesConsumodealcholensemana,Walc=valuesConsumodealcholenfindesemana,health=valuesEstadodesaludactual,absences=valuesAusencias,G1=valuesG1,G2=valuesG2,G3=valuesG3))
Moidelo
Modeloi
Modelo
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
shiny::runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
Modelo
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
Modelo
MatrizX
library(bnlearn)
Grafo = empty.graph(c("A","T","E","L","S","B","X","D"))
Grafo
Etiquetas = c("si","no")
MatrizA = matrix(c(0.01,0.99), ncol = 2,nrow = 1, dimnames = list("values","A" = Etiquetas))
MatrizA
fix(MatrizA)
MatrizT = matrix(c(0.05,0.95,0.01,0.99), ncol = 2,nrow = 2, dimnames =list("T" = Etiquetas,"A"=Etiquetas)  )
MatrizT
MatrizS = matrix(c(0.50,0.50), ncol = 2,nrow = 1, dimnames = list("value","S"= Etiquetas))
MatrizS
MatrizB = matrix(c(0.60,0.40,0.30,0.70), ncol = 2,nrow = 2, dimnames = list("B"=Etiquetas,"S"= Etiquetas))
MatrizB
MatrizL = matrix(c(0.10,0.90,0.01,0.99), ncol = 2,nrow = 2, dimnames = list("L" = Etiquetas,"S"= Etiquetas))
MatrizL
MatrizX = matrix(c(0.98,0.02,0.05,0.95), ncol = 2,nrow = 2, dimnames = list("X"=Etiquetas, "E"=Etiquetas))
MatrizX
valuesE = c(1,0,1,0,1,0,0,1)
dim(valuesE) = c(2,2,2)
dimnames(valuesE) = list("E"=Etiquetas,"L"= Etiquetas,"T"=Etiquetas)
valuesE
valuesD = c(0.90,0.10,0.80,0.20,0.70,0.30,0.10,0.90)
dim(valuesD) = c(2,2,2)
dimnames(valuesD) = list("D"=Etiquetas, "E"=Etiquetas, "B"=Etiquetas)
matrizU1 =  matrix(0,ncol = 8, nrow = 8, dimnames = list(c("A","T","E","L","S","B","X","D"),c("A","T","E","L","S","B","X","D")))
matrizU1["A","T"]=1
matrizU1["S","L"]=1
matrizU1["S","B"]=1
matrizU1["B","D"]=1
matrizU1["L","E"]=1
matrizU1["T","E"]=1
matrizU1["E","X"]=1
matrizU1["E","D"]=1
amat(Grafo) = matrizU1
Modelo = custom.fit(Grafo,dist = list(A=MatrizA, B=MatrizB,L=MatrizL,S=MatrizS,T=MatrizT,X=MatrizX,D=valuesD, E=valuesE))
Modelo
Grafo
plot(Grafo)
cpquery(Modelo,A =="si",T =="si")
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
Grafo
Modelo
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
Grafdo
Grafo
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
Grafo = empty.graph(c("sex","age","address","famsize","Medu","Fedu","reason","guardian","failures","romantic","freetime","Pstatus","Mjob","Fjob","traveltime","studytime","schoolsup","famsup","paid","activities","higher","internet","famrel","goout","Dalc","Walc","health","absences","G1","G2","G3"))
#Opciones de cada variable
Etiquetas = c("OP1","OP2")
#matriz 1*1 (11)
#OP1 = F, OP2 = M
MatrizSexo = matrix(c(0.524,0.476), ncol = 2,nrow = 1, dimnames = list("value","sex" = Etiquetas))
#OP1 = MAS 18, OP2 = MENOR = 18
MatrizEdad = matrix(c(0.221,0.779), ncol = 2,nrow = 1, dimnames = list("value","age" = Etiquetas))
#OP1 = R, OP2 = U
MatrizZona = matrix(c(0.181,0.819), ncol = 2,nrow = 1, dimnames = list("value","address" = Etiquetas))
#OP1 = GT3, OP2 = LE3
MatrizTamaniofamilia = matrix(c(0.721,0.279), ncol = 2,nrow = 1, dimnames = list("value","famsize" = Etiquetas))
#OP1 = MAYOR3, OP2 = MENOR3
Matrizeducacionmadres = matrix(c(0.596,0.404), ncol = 2,nrow = 1, dimnames = list("value","Medu" = Etiquetas))
#OP1 = MAYOR3, OP2 = MENOR3
Matrizeducacionpadres = matrix(c(0.507,0.493), ncol = 2,nrow = 1, dimnames = list("value","Fedu" = Etiquetas))
#OP1 = R1, OP2 = R2
MatrizRazonparaescogercolegio = matrix(c(0.567,0.433), ncol = 2,nrow = 1, dimnames = list("value","reason" = Etiquetas))
#OP1 = PADRES, OP2 = OTHERS
MatrizGuardinaestudiantil = matrix(c(0.924,0.076), ncol = 2,nrow = 1, dimnames = list("value","guardian" = Etiquetas))
#OP1 = FALLA, OP2 = NOFALLA
MatrizCursosjalados = matrix(c(0.199,0.801), ncol = 2,nrow = 1, dimnames = list("value","failures" = Etiquetas))
#OP1 = NO, OP2 = YES
MatrizRomance = matrix(c(0.676,0.324), ncol = 2,nrow = 1, dimnames = list("value","romantic" = Etiquetas))
#OP1 = FT1, OP2 = FT2
MatrizTiempolibre = matrix(c(0.616,0.384), ncol = 2,nrow = 1, dimnames = list("value","freetime" = Etiquetas))
#matriz 2*2 (6)
MatriztrabajoMama = matrix(c(0.328,0.672,0.729,0.271), ncol = 2,nrow = 2, dimnames = list("Mjob"=Etiquetas,"Medu"= Etiquetas))
MatriztrabajoPapa = matrix(c(0.492,0.508,0.725,0.275), ncol = 2,nrow = 2, dimnames = list("Fjob"=Etiquetas,"Fedu"= Etiquetas))
MatrizApoyoestudiantilextra = matrix(c(0.893,0.107,0.829,0.171), ncol = 2,nrow = 2, dimnames = list("schoolsup"=Etiquetas,"famsup"= Etiquetas))
MatrizActividadextra = matrix(c(0.477,0.523,0.433,0.567), ncol = 2,nrow = 2, dimnames = list("activities"=Etiquetas,"schoolsup"= Etiquetas))
MatrizClasespagasextra = matrix(c(0.533,0.467,0.567,0.433), ncol = 2,nrow = 2, dimnames = list("paid"=Etiquetas,"schoolsup"= Etiquetas))
MatrizTiempodeviaje  = matrix(c(0.836,0.164,0.956,0.044), ncol = 2,nrow = 2, dimnames = list("traveltime"=Etiquetas,"address"= Etiquetas))
#matriz 2*2*2 (6)
valuesConsumodealcholenfindesemana = c(0.964,0.036,0.892,0.108,0.635,0.365,0.676,0.324)
dim(valuesConsumodealcholenfindesemana) = c(2,2,2)
dimnames(valuesConsumodealcholenfindesemana) = list("Walc"=Etiquetas, "sex"=Etiquetas, "age"=Etiquetas)
valuesConsumodealcholensemana = c(0.988,0.012,0.905,0.095,0.983,0.017,0.927,0.073)
dim(valuesConsumodealcholensemana) = c(2,2,2)
dimnames(valuesConsumodealcholensemana) = list("Dalc"=Etiquetas, "sex"=Etiquetas, "age"=Etiquetas)
valuesconvivenciaconpadres = c(0.087,0.913,0.183,0.817,0.165,0.835,0.077,0.923)
dim(valuesconvivenciaconpadres) = c(2,2,2)
dimnames(valuesconvivenciaconpadres) = list("Pstatus"=Etiquetas, "Mjob"=Etiquetas, "Fjob"=Etiquetas)
valuesAusencias = c(0.384,0.616,0.583,0.417,0.391,0.609,0.650,0.350)
dim(valuesAusencias) = c(2,2,2)
dimnames(valuesAusencias) = list("absences"=Etiquetas, "famsup"=Etiquetas, "Dalc"=Etiquetas)
valuesInternet = c(0.269,0.731,0.115,0.885,0.591,0.409,0.115,0.885)
dim(valuesInternet) = c(2,2,2)
dimnames(valuesInternet) = list("internet"=Etiquetas, "traveltime"=Etiquetas, "address"=Etiquetas)
valuesG3 = c(0.966,0.034,0.342,0.658,0.881,0.119,0.070,0.930)
dim(valuesG3) = c(2,2,2)
dimnames(valuesG3) = list("G3"=Etiquetas, "G1"=Etiquetas, "G2"=Etiquetas)
#matriz 2*2*2*2 (7)
valuesCalidadderelacionfamiliar = c(0.259,0.741,0.209,0.791,0.278,0.722,0.350,0.650,0.50,0.50,0.50,0.50,0.50,0.50,0.115,0.885)
dim(valuesCalidadderelacionfamiliar) = c(2,2,2,2)
dimnames(valuesCalidadderelacionfamiliar) = list("famrel"=Etiquetas, "Dalc"=Etiquetas, "Walc"=Etiquetas, "Pstatus"=Etiquetas)
valuesEstadodesaludactual = c(0.419,0.581,0.50,0.50,0.477,0.523,0.50,0.50,0.553,0.447,0.550,0.450,0.582,0.418,0.875,0.125)
dim(valuesEstadodesaludactual) = c(2,2,2,2)
dimnames(valuesEstadodesaludactual) = list("health"=Etiquetas, "famrel"=Etiquetas,"absences"=Etiquetas, "Dalc"=Etiquetas)
valuesG1 = c(0.10,0.90,0.071,0.929,0.5,0.5,0.125,0.875,0.621,0.379,0.359,0.641,0.569,0.431,0.50,0.50)
dim(valuesG1) = c(2,2,2,2)
dimnames(valuesG1) = list("G1"=Etiquetas, "higher"=Etiquetas, "health"=Etiquetas, "goout"=Etiquetas)
valuesSalirconamigos = c(0.744,0.256,0.805,0.195,0.583,0.417,0.812,0.188,0.537,0.463,0.458,0.542,0.439,0.561,0.464,0.536)
dim(valuesSalirconamigos) = c(2,2,2,2)
dimnames(valuesSalirconamigos) = list("goout"=Etiquetas, "freetime"=Etiquetas, "activities"=Etiquetas, "absences"=Etiquetas)
valuesApoyoeduaciondefamilia = c(0.361,0.639,0.331,0.669,0.417,0.583,0.433,0.567,0.50,0.50,0.324,0.676,0.50,0.50,0.357,0.643)
dim(valuesApoyoeduaciondefamilia) = c(2,2,2,2)
dimnames(valuesApoyoeduaciondefamilia) = list("famsup"=Etiquetas,"guardian"=Etiquetas, "famsize"=Etiquetas, "Pstatus"=Etiquetas )
valuesTiempodeestudio = c(0.50,0.50,0.50,0.50,0.50,0.50,0.50,0.50,0.50,0.50,0.50,0.50,0.50,0.50,0.50,0.50)
dim(valuesTiempodeestudio) = c(2,2,2,2)
dimnames(valuesTiempodeestudio) = list("studytime"=Etiquetas, "romantic"=Etiquetas, "failures"=Etiquetas, "internet"=Etiquetas)
valuesContinuareduacionsuperior = c(0.073,0.927,0.160,0.840,0.007,0.993,0.012,0.988,0.024,0.976,0.028,0.972,0.016,0.984,0.028,0.972)
dim(valuesContinuareduacionsuperior) = c(2,2,2,2)
dimnames(valuesContinuareduacionsuperior) = list("higher"=Etiquetas, "studytime"=Etiquetas, "paid"=Etiquetas, "reason"=Etiquetas)
#matriz 2*2*2*2*2 (1)
valuesG2 = c(0.50,0.50,0.936,0.064,0.833,0.167,0.863,0.137,0.50,0.50,0.865,0.135,0.50,0.50,0.848,0.152,0.10,0.90,0.244,0.756,0.167,0.833,0.074,0.926,0.071,0.929,0.12,0.88,0.125,0.875,0.109,0.891)
dim(valuesG2) = c(2,2,2,2,2)
dimnames(valuesG2) = list("G2"=Etiquetas, "G1"=Etiquetas, "goout"=Etiquetas, "health"=Etiquetas, "higher"=Etiquetas)
#GRAFO
matrizU1 =  matrix(0,ncol = 31, nrow = 31, dimnames = list(c("sex","age","address","famsize","Medu","Fedu","reason","guardian","failures","romantic","freetime","Pstatus","Mjob","Fjob","traveltime","studytime","schoolsup","famsup","paid","activities","higher","internet","famrel","goout","Dalc","Walc","health","absences","G1","G2","G3"),c("sex","age","address","famsize","Medu","Fedu","reason","guardian","failures","romantic","freetime","Pstatus","Mjob","Fjob","traveltime","studytime","schoolsup","famsup","paid","activities","higher","internet","famrel","goout","Dalc","Walc","health","absences","G1","G2","G3")))
matrizU1["sex","Walc"]=1
matrizU1["sex","Dalc"]=1
matrizU1["age","Walc"]=1
matrizU1["age","Dalc"]=1
matrizU1["address","traveltime"]=1
matrizU1["address","internet"]=1
matrizU1["famsize","famsup"]=1
matrizU1["Medu","Mjob"]=1
matrizU1["Fedu","Fjob"]=1
matrizU1["reason","higher"]=1
matrizU1["guardian","famsup"]=1
matrizU1["failures","studytime"]=1
matrizU1["romantic","studytime"]=1
matrizU1["freetime","goout"]=1
matrizU1["Walc","famrel"]=1
matrizU1["traveltime","internet"]=1
matrizU1["internet","studytime"]=1
matrizU1["studytime","higher"]=1
matrizU1["Mjob","Pstatus"]=1
matrizU1["Fjob","Pstatus"]=1
matrizU1["Dalc","famrel"]=1
matrizU1["Dalc","health"]=1
matrizU1["Dalc","absences"]=1
matrizU1["Pstatus","famrel"]=1
matrizU1["Pstatus","famsup"]=1
matrizU1["famsup","absences"]=1
matrizU1["famsup","schoolsup"]=1
matrizU1["famrel","health"]=1
matrizU1["absences","health"]=1
matrizU1["absences","goout"]=1
matrizU1["schoolsup","activities"]=1
matrizU1["schoolsup","paid"]=1
matrizU1["activities","goout"]=1
matrizU1["paid","higher"]=1
matrizU1["higher","G1"]=1
matrizU1["higher","G2"]=1
matrizU1["goout","G1"]=1
matrizU1["goout","G2"]=1
matrizU1["health","G1"]=1
matrizU1["health","G2"]=1
matrizU1["G1","G3"]=1
matrizU1["G2","G3"]=1
matrizU1["G1","G2"]=1
amat(Grafo) = matrizU1
Modelo = custom.fit(Grafo,dist = list(sex=MatrizSexo,age=MatrizEdad,address=MatrizZona,famsize=MatrizTamaniofamilia,Medu=Matrizeducacionmadres,Fedu=Matrizeducacionpadres,reason=MatrizRazonparaescogercolegio,guardian=MatrizGuardinaestudiantil,failures=MatrizCursosjalados,romantic=MatrizRomance,freetime=MatrizTiempolibre,Pstatus=valuesconvivenciaconpadres,Mjob=MatriztrabajoMama,Fjob=MatriztrabajoPapa,traveltime=MatrizTiempodeviaje,studytime=valuesTiempodeestudio,schoolsup=MatrizApoyoestudiantilextra,famsup=valuesApoyoeduaciondefamilia,paid=MatrizClasespagasextra,activities=MatrizActividadextra,higher=valuesContinuareduacionsuperior,internet=valuesInternet,famrel=valuesCalidadderelacionfamiliar,goout=valuesSalirconamigos,Dalc=valuesConsumodealcholensemana,Walc=valuesConsumodealcholenfindesemana,health=valuesEstadodesaludactual,absences=valuesAusencias,G1=valuesG1,G2=valuesG2,G3=valuesG3))
Grafo
Modelo
shiny::runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
shiny::runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
falhas <- list()
todosAlvos <- names(dadosTreinamento)
for (alvo in todosAlvos){
falhas <- append(falhas, alvo)
estaFuncionando = 0;
teste <- matrix(nrow = nrow(dadosTesteInferencia), ncol=6)
for (i in 1:nrow(dadosTesteInferencia)) {
if(estaFuncionando <= 1) {
previsto <- predict(fittedTesteInferencia, alvo, dadosTesteInferencia[i, ])
} else {
previsto <- predict(fitted, alvo, dadosTesteInferencia[i, 1:ncol(dadosTeste)])
}
observado <- dadosTesteInferencia[i, alvo]
diferenca <- abs(observado-previsto)
inferenciaNet <- model2network("[S][O|S]")
parametros_S <- matrix(c(0.9, 0.1), ncol = 2, dimnames = list(NULL, c("working", "broken")))
parametros_O <- list(coef = matrix(c(previsto, 0.0001*previsto), ncol = 2, dimnames = list(c("(Intercept)"), NULL)), sd = c(0.1, 10000))
inferenciaFit = custom.fit(inferenciaNet, dist = list(O = parametros_O, S = parametros_S))
teste[i, 1] <- observado
teste[i, 2] <- previsto
teste[i, 3] <- diferenca
teste[i, 4] <- cpquery(inferenciaFit, event = (S=="working"), evidence = list(O=observado), method = "lw")
teste[i, 5] <- cpquery(inferenciaFit, event = (S=="broken"), evidence = list(O=observado), method = "lw")
if(teste[i, 4] > 0.5) {
if(estaFuncionando >= 2){
falhas <- append(falhas, paste("Fim", datasTesteCompleto2niveis[i], sep = ": "))
}
estaFuncionando <- 0
} else {
estaFuncionando <- estaFuncionando + 1
if(estaFuncionando == 2) {
falhas <- append(falhas, paste("Inicio", datasTesteCompleto2niveis[i], sep = ": "))
}
}
teste[i, 6] = estaFuncionando
}
write.table(teste, paste(pastaArquivos, "/testeInferencia_", alvo,".csv", sep = "") , sep=";", dec = ",")
}
write.table(unlist(falhas), paste(pastaArquivos, "/falhas.csv", sep = "") , sep=";", dec = ",")
falhas <- list()
todosAlvos <- names(dadosTreinamento)
for (alvo in todosAlvos){
falhas <- append(falhas, alvo)
estaFuncionando = 0;
teste <- matrix(nrow = nrow(dadosTesteInferencia), ncol=6)
for (i in 1:nrow(dadosTesteInferencia)) {
if(estaFuncionando <= 1) {
previsto <- predict(fittedTesteInferencia, alvo, dadosTesteInferencia[i, ])
} else {
previsto <- predict(fitted, alvo, dadosTesteInferencia[i, 1:ncol(dadosTeste)])
}
observado <- dadosTesteInferencia[i, alvo]
diferenca <- abs(observado-previsto)
inferenciaNet <- model2network("[S][O|S]")
parametros_S <- matrix(c(0.9, 0.1), ncol = 2, dimnames = list(NULL, c("working", "broken")))
parametros_O <- list(coef = matrix(c(previsto, 0.0001*previsto), ncol = 2, dimnames = list(c("(Intercept)"), NULL)), sd = c(0.1, 10000))
inferenciaFit = custom.fit(inferenciaNet, dist = list(O = parametros_O, S = parametros_S))
teste[i, 1] <- observado
teste[i, 2] <- previsto
teste[i, 3] <- diferenca
teste[i, 4] <- cpquery(inferenciaFit, event = (S=="working"), evidence = list(O=observado), method = "lw")
teste[i, 5] <- cpquery(inferenciaFit, event = (S=="broken"), evidence = list(O=observado), method = "lw")
if(teste[i, 4] > 0.5) {
if(estaFuncionando >= 2){
falhas <- append(falhas, paste("Fim", datasTesteCompleto2niveis[i], sep = ": "))
}
estaFuncionando <- 0
} else {
estaFuncionando <- estaFuncionando + 1
if(estaFuncionando == 2) {
falhas <- append(falhas, paste("Inicio", datasTesteCompleto2niveis[i], sep = ": "))
}
}
teste[i, 6] = estaFuncionando
}
}
GPAGE2_Query = "GPAGE2 == ";
GPAGE2_Query <- paste(GPAGE2_Query, "\'", lv_combn_GPAGE2[j, i], "\'", '| GPAGE2 == ', sep="")
print (GPAGE2_Query)
GPAGE2_Query = "GPAGE2 == ";
GPAGE2_Query <- paste(GPAGE2_Query, "\'", 'OP1', "\'", '| GPAGE2 == ', sep="")
print (GPAGE2_Query)
GPAGE2_Query = "GPAGE2 == ";
GPAGE2_Query <- paste(GPAGE2_Query, "\'", 'OP1', "\'", ')
print (GPAGE2_Query)
PAGE2_Query = "GPAGE2 == ";
GPAGE2_Query <- paste(GPAGE2_Query, "\'", 'OP1', "\'", ')
print (GPAGE2_Query)
GPAGE2_Query = "GPAGE2 == ";
GPAGE2_Query <- paste(GPAGE2_Query, "\'", 'OP1', "\'", ')
print (GPAGE2_Query)
GPAGE2_Query = "GPAGE2 == ";
GPAGE2_Query <- paste(GPAGE2_Query, "\'", 'OP1' , "\'", sep="")
print (GPAGE2_Query)
GPAGE2_Query = "GPAGE2 == ";
GPAGE2_Query <- paste(GPAGE2_Query, "\'", 'OP1' , "\'", sep="")
print (GPAGE2_Query)
GPAGE2_Query = "GPAGE2 == ";
GPAGE2_Query <- paste(GPAGE2_Query, "\'", 'OP1' , "\'", sep="")
print (GPAGE2_Query)
GPAGE2_Query = "GPAGE2 == ";
GPAGE2_Query <- paste(GPAGE2_Query, "\'", 'OP1' , "\'", sep="")
print (GPAGE2_Query)
GPAGE2_Query = "sex == ";
GPAGE2_Query <- paste(GPAGE2_Query, "\'", 'OP1' , "\'", sep="")
print (GPAGE2_Query)
shiny::runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
shiny::runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
runApp('E:/Clases/inteligencia artifical/TF/TF-IA/Proyect')
